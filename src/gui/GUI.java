/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import answeringmachine.ProcessCall;
import configuration.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.EventObject;
import java.util.Hashtable;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.Timer;
import playRecGst.*;

 
public final class GUI extends javax.swing.JFrame {

    //-------------------------------------------------------------------------+
    //|************************    VARIABLES     ******************************|
    //+------------------------------------------------------------------------+
    private final Controller controller;
    private boolean isRecording = false;

    //Instantiate configuration properties.
    Config properties = new Config();

    //Variables to link the name of a file with its path.
    Hashtable<String, String> HtableInBox = new Hashtable<String, String>();
    Hashtable<String, String> HtableSaved = new Hashtable<String, String>();

    //Variables to manage the recording timing.
    private long startTime;
    private final TimerListener clock = new TimerListener();
    private final Timer timer = new Timer(53, (ActionListener) clock);
    private final SimpleDateFormat date = new SimpleDateFormat("mm:ss:SSS");
    public int counter = 0;
    DefaultListModel model1 = new DefaultListModel();

    /**
     * Creates new form GUI
     *
     * @param c is the Controller to control Player and Recorder.
     */
    public GUI(Controller c) {
        //Save the Controller localy.
        controller = c;

        //Launch the login window.
        initComponents();
        jMenu1.setVisible(false);
        jMenu2.setVisible(false);
        System.out.println("Security check OK.");
        
        //Load persistent set of properties.
        properties.getAll();

        //Refresh the gui.
        refresh();

        System.out.println("Folder " + controller.getInBoxFolderPath() + " OK");
        System.out.println("Folder " + controller.getSavedFolderPath() + " OK");

        //Instantiate a listener to listen potential msg from the SoundPlayer.
        EventListener guiListener = new EventListener() {
            @Override
            public void fireEvent(EventObject e) {
                /*
                 Here, we simply check if the event is a PlayEnd event and we simply, update the 
                 Play button from Pause Icon to Play Icon and set the status label to finsihed
                 */
                //If message code 1 (PlayEnd) is listen.
                if (e.getSource().equals(1)) {

                    //Stop the player.
                    controller.playerStop();

                    //Change Icon buttons.
                    playButton.setIcon(new ImageIcon(getClass().getResource("/icons/play.png")));

                    //Set information label status.
                    lblDuration.setText("Finished");
                }
            }
        };

        //Define guiListener as the listener for the SoundPlayer events.
        controller.setPlayerListener(guiListener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        InBoxList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        SavedList = new javax.swing.JList();
        deleteButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        emailTxt = new javax.swing.JTextField();
        emailBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        sipAddressTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        sipBtn = new javax.swing.JButton();
        debugLbl = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        listenButton = new javax.swing.JButton();
        micButton = new javax.swing.JButton();
        saveAsButton = new javax.swing.JButton();
        timerField = new javax.swing.JTextField();
        lblDuration = new javax.swing.JTextField();
        setGreetingBtn = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        psPlay = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        addressPropItem = new javax.swing.JMenuItem();
        greetingItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        InBoxList.setBorder(javax.swing.BorderFactory.createTitledBorder("InBox"));
        InBoxList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        InBoxList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        InBoxList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InBoxListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(InBoxList);

        SavedList.setBorder(javax.swing.BorderFactory.createTitledBorder("Greeting Message"));
        SavedList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        SavedList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SavedListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(SavedList);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        emailBtn.setText("Set Email");
        emailBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter your email address");

        jLabel2.setText("Enter SIP address to forward the selected audio file");

        sipBtn.setText("Send");
        sipBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sipBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(sipAddressTxt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emailTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emailBtn)
                            .addComponent(sipBtn)))
                    .addComponent(jLabel2)
                    .addComponent(debugLbl))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailBtn))
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sipAddressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sipBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(debugLbl)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        listenButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/listen.png"))); // NOI18N
        listenButton.setEnabled(false);
        listenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listenButtonActionPerformed(evt);
            }
        });

        micButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/mic.png"))); // NOI18N
        micButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                micButtonActionPerformed(evt);
            }
        });

        saveAsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/saveas.png"))); // NOI18N
        saveAsButton.setEnabled(false);
        saveAsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsButtonActionPerformed(evt);
            }
        });

        timerField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        timerField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        timerField.setText("00:00:000");

        lblDuration.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        lblDuration.setText("Welcome!");
        lblDuration.setBorder(null);
        lblDuration.setCaretColor(javax.swing.UIManager.getDefaults().getColor("Button.background"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDuration)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(micButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(listenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saveAsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 105, Short.MAX_VALUE))
                            .addComponent(timerField))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(micButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(listenButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveAsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(lblDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setGreetingBtn.setText("Set Greeting");
        setGreetingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setGreetingBtnActionPerformed(evt);
            }
        });

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/play.png"))); // NOI18N
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/stop.png"))); // NOI18N
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        addressPropItem.setText("Address");
        addressPropItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressPropItemActionPerformed(evt);
            }
        });
        jMenu2.add(addressPropItem);

        greetingItem.setText("Greeting");
        greetingItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greetingItemActionPerformed(evt);
            }
        });
        jMenu2.add(greetingItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                        .addComponent(jScrollPane3))
                    .addComponent(setGreetingBtn)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(psPlay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(34, 34, 34)
                            .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(36, 36, 36)
                            .addComponent(refreshButton))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 317, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(deleteButton)
                                        .addGap(13, 13, 13))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(refreshButton)
                                .addGap(14, 14, 14)))
                        .addComponent(psPlay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(setGreetingBtn))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addressPropItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressPropItemActionPerformed
        setAddress();
    }//GEN-LAST:event_addressPropItemActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        playMessage();
    }//GEN-LAST:event_playButtonActionPerformed

    private void InBoxListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InBoxListMouseClicked
        if (!SavedList.isSelectionEmpty()) {
            SavedList.clearSelection();
        }
        System.out.println("clicked");

    }//GEN-LAST:event_InBoxListMouseClicked

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        stop();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refresh();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        delete();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void listenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listenButtonActionPerformed
        listen();
    }//GEN-LAST:event_listenButtonActionPerformed

    private void micButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_micButtonActionPerformed
        record();
    }//GEN-LAST:event_micButtonActionPerformed

    private void saveAsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsButtonActionPerformed
        saveAs();
    }//GEN-LAST:event_saveAsButtonActionPerformed

    private void greetingItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greetingItemActionPerformed
       
    }//GEN-LAST:event_greetingItemActionPerformed

    private void SavedListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SavedListMouseClicked
        if (!InBoxList.isSelectionEmpty()) {

            InBoxList.clearSelection();
        }
        System.out.println("clicked");
    }//GEN-LAST:event_SavedListMouseClicked

    private void setGreetingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setGreetingBtnActionPerformed
         setGreeting();
    }//GEN-LAST:event_setGreetingBtnActionPerformed

    private void emailBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailBtnActionPerformed
        setAddress();
    }//GEN-LAST:event_emailBtnActionPerformed

    private void sipBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sipBtnActionPerformed
        test();
    }//GEN-LAST:event_sipBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList InBoxList;
    private javax.swing.JList SavedList;
    private javax.swing.JMenuItem addressPropItem;
    private javax.swing.JLabel debugLbl;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton emailBtn;
    private javax.swing.JTextField emailTxt;
    private javax.swing.JMenuItem greetingItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField lblDuration;
    private javax.swing.JButton listenButton;
    private javax.swing.JButton micButton;
    private javax.swing.JButton playButton;
    private javax.swing.JProgressBar psPlay;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveAsButton;
    private javax.swing.JButton setGreetingBtn;
    private javax.swing.JTextField sipAddressTxt;
    private javax.swing.JButton sipBtn;
    private javax.swing.JButton stopButton;
    public javax.swing.JTextField timerField;
    // End of variables declaration//GEN-END:variables

    /**
     * Jpanel Properties to configure a forwarding email address.
     */
    public void setAddress() {
        properties.setProperties("address", emailTxt.getText());
                properties.getAll();
    }

    /**
     * Play a Voice message.
     */
    private void playMessage() {

        //Variable representing the path of the concerning foler.
        String path = null;

        //Check in which list are we
        if (!InBoxList.isSelectionEmpty()) {
            path = HtableInBox.get(InBoxList.getSelectedValue().toString());
        } else if (!SavedList.isSelectionEmpty()) {
            path = SavedList.getSelectedValue().toString();
        } 
        else {
            lblDuration.setText("INFO: Select a message please.");
        }
       // path=SavedList.getSelectedValue().toString();
        System.out.println(path + " sd");
        //Take action according to path variable
        if (path != null) {
            if (controller.playerIsPlaying()) {
                controller.playerPause();
                playButton.setIcon(new ImageIcon(getClass().getResource("/icons/play.png")));
                lblDuration.setText("Paused");
            } else if (controller.playerIsPaused()) {
                controller.playerPlay();
                playButton.setIcon(new ImageIcon(getClass().getResource("/icons/pause.png")));
                lblDuration.setText("Playing");
            } else {
                controller.playerPlayFile(path);
                playButton.setIcon(new ImageIcon(getClass().getResource("/icons/pause.png")));
                startPoll();
                lblDuration.setText("Playing");
            }
        }

    }

    /**
     * Manage the player progressing bar animation
     */
    private void startPoll() {
        Thread task = new Thread() {
            @Override
            public void run() {
                while (true) {
                    try {
                        long position = controller.playerGetPosition();
                        long duration = controller.playerGetDuration();
                        psPlay.setValue((int) ((position * 100) / duration));
                    } catch (Exception e) {
                    }
                    try {
                        Thread.sleep(1000);
                    } catch (Exception e) {
                    }
                }
            }
        };
        task.start();
    }

    /**
     * Play previous message.
     */
    private void playPrevious() {
        //Variables linked to the List concerned.
        Hashtable<String, String> Htable = null;
        JList jlist = null;

        //Check in which list are we
        if (!InBoxList.isSelectionEmpty()) {
            Htable = HtableInBox;
            jlist = InBoxList;
        } else if (!SavedList.isSelectionEmpty()) {
            Htable = HtableSaved;
            jlist = SavedList;
        } else {
            lblDuration.setText("INFO: Select a message please.");
        }

        //Take action in accordance with previous check.
        if (Htable != null && jlist != null && controller.playerIsPlaying()) {

            //Select the next element
            int index = jlist.getSelectedIndex();
            index--;

            //Manage end of list situation
            if (index >= 0) {
                jlist.setSelectedIndex(index);
            } else {
                jlist.setSelectedIndex(jlist.getModel().getSize() - 1);
            }

            //Get the path of the corresponding file and play it.
            String path = Htable.get(jlist.getSelectedValue().toString());
            controller.playerPlayFile(path);
        }
    }

    /**
     * Play next message.
     */
    private void playNext() {

        //Variables linked to the List concerned.
        Hashtable<String, String> Htable = null;
        JList jlist = null;

        //Check in which list are we
        if (!InBoxList.isSelectionEmpty()) {
            Htable = HtableInBox;
            jlist = InBoxList;
        } else if (!SavedList.isSelectionEmpty()) {
            Htable = HtableSaved;
            jlist = SavedList;
        } else {
            lblDuration.setText("INFO: Select a message please.");
        }

        //Take action in accordance with previous check.
        if (Htable != null && jlist != null && controller.playerIsPlaying()) {

            //Select the next element
            int index = jlist.getSelectedIndex();
            index++;

            //Manage end of list situation
            if (jlist.getModel().getSize() <= index) {
                jlist.setSelectedIndex(0);
            } else {
                jlist.setSelectedIndex(index);
            }

            //Get the path of the corresponding file and play it.
            String path = Htable.get(jlist.getSelectedValue().toString());
            controller.playerPlayFile(path);
        }

    }

    /**
     * Stop playing.
     */
    private void stop() {
        //Stop the Player
        controller.playerStop();

        //Change icone.
        playButton.setIcon(new ImageIcon(getClass().getResource("/icons/play.png")));

        //Change information label
        lblDuration.setText("Stopped");
    }

    /**
     * Refresh InBox and Saved voice messages.
     */
    public void refresh() {
        // refresh both folder
       // refresh(".wav", SavedList, controller.getSavedFolderPath(), HtableSaved);
         DefaultListModel model3 = new DefaultListModel();
        File o = new File("C:\\Users\\Dimitar\\Documents\\NetBeansProjects\\M7017E_LAB3-master\\Greeting");

         File[] yourFileList = o.listFiles();
        for(File f : yourFileList) {
        model3.addElement("C:\\Users\\Dimitar\\Documents\\NetBeansProjects\\M7017E_LAB3-master\\Greeting\\"+f.getName());
        SavedList.setModel(model3);
    }
        refresh(".wav", InBoxList, controller.getInBoxFolderPath(), HtableInBox);
    }

    /**
     * Refresh a specific folder.
     *
     * @param extension is the extention of the files to scan.
     * @param jlist is the GUI element to refresh.
     * @param path is the path of the folder.
     * @param Htable is the full path of the folder.
     */
    private void refresh(final String extension, JList jlist, String path, Hashtable Htable) {

        //Instanciate an abstract folder.
        File folder = new File(path);

        //Create an abstract list of files according to "path" and "extension".
        File[] listOfFiles = folder.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith(extension);
            }
        });

        //Instanciate a temporary list model to store files paths found.
        DefaultListModel model = new DefaultListModel();

        for (int i = 0; i < listOfFiles.length; i++) {
            if (listOfFiles[i].isFile()) {
                model.add(i, listOfFiles[i].getAbsolutePath());
            }
        }

        //Instanciate a temporary list model to store paths names.
        DefaultListModel jlistmodel = new DefaultListModel();

        for (int i = 0; i < model.getSize(); i++) {
            //Retrieve the Key= name of the file ; Value= path of the file.
            String key = new File(model.get(i).toString()).getName();
            String Value = new File(model.get(i).toString()).getAbsolutePath();

            //Update the Htable.
            Htable.put(key, Value);
            jlistmodel.add(i, new File(model.get(i).toString()).getName());
        }

        //Update the gui.
        jlist.setModel(jlistmodel);
    }

    /**
     * Delete the selected voice message.
     */
    private void delete() {

        //Variables linked to the List concerned.
        Hashtable<String, String> Htable = null;
        String tmpPath;
        JList jlist = null;

        //Check in which list are we
        if (!InBoxList.isSelectionEmpty()) {
            Htable = HtableInBox;
            jlist = InBoxList;
             String path = Htable.get(jlist.getSelectedValue().toString()); 
            File f = new File(path);
            boolean success = f.delete();
            if (success) {
                refresh();
                lblDuration.setText("Message deleted.");
            } else {
                throw new IllegalArgumentException("Deletion failed: check your rights for the target file/folder");
            }
        } else if (!SavedList.isSelectionEmpty()) {
            tmpPath = SavedList.getSelectedValue().toString();
            File f = new File(tmpPath);
            boolean success = f.delete();
            if (success) {
                refresh();
                lblDuration.setText("Message deleted.");
            } else {
                throw new IllegalArgumentException("Deletion failed: check your rights for the target file/folder");
            }
        } else {
            lblDuration.setText("INFO: Select a message please.");
        }

        if (jlist != null) {
           
        }
    }

    /**
     * Move the file from InBox folder to Saved folder.
     */
    private void move() {

        //Move from InBox to Saved folder only.
        if (!InBoxList.isSelectionEmpty()) {
            String path = HtableInBox.get(InBoxList.getSelectedValue().toString());
            File file = new File(path);
            
            file.renameTo(new File(Constants.SAVED_PATH + File.separator + InBoxList.getSelectedValue().toString()));
        }

        //refresh
        refresh();

    }

    /**
     * Record a new setGreeting message.
     */
    private void record() {
        if (!isRecording) {
            isRecording = true;
            controller.playerStop();
            playButton.setIcon(new ImageIcon(getClass().getResource("/icons/play.png")));
            controller.captureStart();
            listenButton.setEnabled(false);
            saveAsButton.setEnabled(false);
            startTime = System.currentTimeMillis();
            timer.start();
            lblDuration.setText("Recording");
        } else {
            controller.captureStop();
            isRecording = false;
            listenButton.setEnabled(true);
            saveAsButton.setEnabled(true);
            timer.stop();
            lblDuration.setText("Listen your new greeting message before to save it.");
        }
    }

    private void test() {
        String external = "external";
        String tmpAddress = sipAddressTxt.getText();
        String path = InBoxList.getSelectedValue().toString();
        if (tmpAddress == null){
            debugLbl.setText("Enter the SIP address correctly");
        }
        if (path == null){
            debugLbl.setText("Select a file from the InBox list");
        }
        ProcessCall sendMsg = new ProcessCall("AutoAnswer", tmpAddress, 5060, external, path);
        
    }

    /**
     * Listener for the Timer.
     */
    private class TimerListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            updateTimer();
        }
    }

    /**
     * Update the timer.
     */
    private void updateTimer() {
        Date elapsed = new Date(System.currentTimeMillis() - startTime - 3600000);
        timerField.setText(date.format(elapsed));
    } 

    /**
     * Listen the new Greeting message.
     */
    private void listen() {
        if (controller.playerIsPlaying()) {
            controller.playerStop();
            lblDuration.setText("Stopped");
        } else {
            controller.playerPlayDraftGreeting();
            lblDuration.setText("Listenning");
        }
    }

    /**
     * Save your new setGreeting message.
     */
    private void saveAs() {
        //Variable to broswe the local computer folders.
        final JFileChooser fc = new JFileChooser(new File(Constants.GREETING_PATH));

        int check = fc.showSaveDialog(this);
        if (check == JFileChooser.APPROVE_OPTION) {
            controller.saveAs(fc.getSelectedFile().getPath());
            
            String tmp = controller.getLastAudio();
            //System.out.println(tmp);
            //model1.addElement(fc.getSelectedFile().getPath()+".ogg");
            //SavedList.setModel(model1);
            //Change labels
            lblDuration.setText("File Saved");
            timerField.setText("00:00:000");

            //Disable buttons
            listenButton.setEnabled(false);
            saveAsButton.setEnabled(false);
 
            properties.getAll();
            refresh();
        }
    }

    /**
     * Jpanel Properties to configure a setGreeting message.
     */
    private void setGreeting() {
        String path;
        if (!SavedList.isSelectionEmpty()) {
            path = SavedList.getSelectedValue().toString();
             System.out.println(path + "neee");
             Path p = Paths.get(path);
            String file = p.getFileName().toString();
            System.out.println(file + "daaa");
            properties.setProperties("greetingTime", getDuration(path));
            properties.setProperties("greeting", file);
             properties.getAll();
        } 
    }

    /**
     * Get the duration of an MP3 file.
     *
     * @param is the file path of the MP3 file.
     */
    private String getDuration(String filePath) {
        try {
            File file = new File(filePath);

            System.out.println("FILEPATH IN GETDURATION: " + filePath);
            
            AudioFileFormat baseFileFormat =  AudioSystem.getAudioFileFormat(file);
            Map prop = baseFileFormat.properties();
            
            System.out.println("DURATION OBTAIN IN GETDURATION: " + String.valueOf((long) prop.get("duration")/1000000.000));
            
            return String.valueOf((long) prop.get("duration")/1000000.000);
            
        } catch (IOException | UnsupportedAudioFileException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } 
        return "-1";

    }

}
